version: "3.9"
services:
# ================================================================================================================
# Frontend Taskverse
# ================================================================================================================
  frontend:
    container_name: taskverse_frontend
    build: ./frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
# ================================================================================================================
# Backend Taskverse
# ================================================================================================================
  backend:
    container_name: taskverse_backend
    build: ./backend
    depends_on:
      - mongo
    ports:
      - "3001:3001"
# ================================================================================================================
# Node Exporter - Nos permitira obtener estadísticas de NodeJS de la parte Backend de nuestra aplicación.
# ================================================================================================================
  node_exporter:
    container_name: taskverse_node_exporter
    image: quay.io/prometheus/node-exporter:latest
    restart: always
    ports:
      - 9100:9100
    volumes:
      - node_exporter_data:/tmp/
# ================================================================================================================
# mongo es la base de datos que nos permitira crear la base de datos con la que trabajara nuestra api de taskverse.
# ================================================================================================================
  mongo:
    container_name: taskverse_mongo
    image: mongo
    restart: always
    volumes: 
      - mongodb_data:/data/db
    environment: 
      MONGODB_INITDB_ROOT_USERNAME: ${MONGODB_INITDB_ROOT_USERNAME}
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGODB_INITDB_ROOT_PASSWORD}
    # descomentar para usar mongo local
    # ports:
    #   - 27017:27017
# ================================================================================================================
# mongo_exporter nos permitira consumir las metricas de mongo y obtener estadísticas para prometheus.
# ================================================================================================================
  mongo_exporter:
    container_name: taskverse_mongo_exporter
    image: percona/mongodb_exporter:0.40.0
    restart: always
    ports:
      - "9216:9216"
    command: 
      - '--mongodb.uri=mongodb://mongo:27017/${MONGO_INITDB_DATABASE}'
      - '--mongodb.collstats-colls=Test.Listings'
      - '--discovering-mode'
      - '--mongodb.direct-connect'
      - '--collect-all'
    environment:
      - MONGODB_URI=mongodb://mongo:27017/${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo
# ================================================================================================================
# mongo-express nos proporciona una interfaz de usuario para administrar la base de datos mongodb.
# ================================================================================================================
  mongo-express:
    container_name: taskverse-mongo-express
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    ports:
      - "8081:8081"
    depends_on:
      - mongo  
# ================================================================================================================
# snmp_exporter nos permitira consumir la base de datos y obtener estadísticas para prometheus.
# ================================================================================================================
  snmp_exporter:
    container_name: taskverse-snmp-exporter
    image: prom/snmp-exporter
    restart: always
    ports:
      - "9157:9157"
# ================================================================================================================
# keycloak es el servidor que nos permitirá implementar un sistema de autenticación.
# ================================================================================================================
  keycloak:
    image: keycloak/keycloak:latest
    container_name: taskverse-keycloak
    restart: always
    command:
      - start-dev
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
    ports:
      - "8080:8080"
    depends_on:
      - postgres
# ================================================================================================================
# postgres nos permitira crear la base de datos con la que trabajara nuestro keycloak.
# ================================================================================================================
  postgres:
    image: postgres:latest
    container_name: taskverse_postgres
    command: postgres -c 'max_connections=200'
    volumes:
      - pgdata_keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
# ================================================================================================================
# postgres-exporter nos permitira consumir la base de datos y obtener estadísticas para prometheus.
# ================================================================================================================
  postgres-exporter:
    container_name: taskverse_postgres_exporter
    image: bitnami/postgres-exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgres

# ================================================================================================================
# prometheus nos permitira recopilar metricas de sistemas y servicios en tiempo real.
# ================================================================================================================ 
  prometheus:
    container_name: taskverse_prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml

# ================================================================================================================
# grafana nos permitira visualizar y analizar los datos recopilados en prometheus.
# ================================================================================================================
  grafana:
    container_name: taskverse_grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - 3002:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

# ==============================
# volumes
# ==============================
volumes: 
  mongodb_data:
  pgdata_keycloak:
  prometheus_data:
  grafana_data:
  node_exporter_data: